AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: GLOF DEV CloudFormation

Parameters:
  LambdaVersion:
    Type: String
    Default: 20210730084656
  Bucket:
    Type: String
    Default: glof-test
  DeployStage:
    Type: String
    Default: dev
  Account:
    Type: String
    Default: 565651431982

Resources:
  # 배치 Lambda 함수의 권환 관리
  GlofLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GLOF_LAMBDA_BASE_ROLE
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: GLOF_BASE_POLICY
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "ssm:GetParam*"
                Resource: "*"
  FirbaseAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Sub [ "lambdas/${deployStage}/${deployVersion}/firebase_token.zip",{ deployStage: !Ref DeployStage,deployVersion: !Ref LambdaVersion } ]
      Description: 'Firebase user Authorizer'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt GlofLambdaRole.Arn
      Environment:
        Variables:
          ENV: !Ref DeployStage
          TZ: Asia/Seoul
      Layers:
        - !Sub [ 'arn:aws:lambda:us-east-1:${Account}:layer:py3_firebase_admin_5_1_0:1', { Account: !Ref Account } ]

  GetLandOwners:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Sub [ "lambdas/${deployStage}/${deployVersion}/get_land_owners.zip",{ deployStage: !Ref DeployStage,deployVersion: !Ref LambdaVersion } ]
      Description: '맵에 표시된 타일들의 소유자 가져오기'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt GlofLambdaRole.Arn
      Environment:
        Variables:
          ENV: !Ref DeployStage
          TZ: Asia/Seoul
          GLOF_DB_PASSWORD: glofadm1!
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Auth:
              Authorizer: FirebaseAuth
            Path: /lands/owners
            Method: get
            RestApiId: !Ref GlofAPI
            RequestParameters:
              - method.request.querystring.notrh:
                  Caching: true
              - method.request.querystring.south:
                  Caching: true
              - method.request.querystring.west:
                  Caching: true
              - method.request.querystring.east:
                  Caching: true
      VpcConfig:
        SecurityGroupIds:
          - sg-07a020b42b513dabb
        SubnetIds:
          - subnet-c66ab499
      Layers:
        - !Sub [ 'arn:aws:lambda:us-east-1:${Account}:layer:py3_pymysql_1_0_2:1', { Account: !Ref Account } ]
  GetMyAreas:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Sub [ "lambdas/${deployStage}/${deployVersion}/get_my_areas.zip",{ deployStage: !Ref DeployStage,deployVersion: !Ref LambdaVersion } ]
      Description: 'Get My Areas'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt GlofLambdaRole.Arn
      Environment:
        Variables:
          ENV: !Ref DeployStage
          TZ: Asia/Seoul
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /areas
            Method: get
            RestApiId: !Ref GlofAPI
            RequestParameters:
              - method.request.header.Authorization
  PostLocations:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.lambda_handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Sub [ "lambdas/${deployStage}/${deployVersion}/post_locations.zip",{ deployStage: !Ref DeployStage,deployVersion: !Ref LambdaVersion } ]
      Description: 'Post Current Locations'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt GlofLambdaRole.Arn
      Environment:
        Variables:
          ENV: !Ref DeployStage
          TZ: Asia/Seoul
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /locations
            Method: post
            RestApiId: !Ref GlofAPI
            RequestParameters:
              - method.request.header.Authorization

  GlofAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Name: GLOF-DEV
      Description: "GLOF API"
      Auth:
        Authorizers:
          FirebaseAuth:
            FunctionArn: !GetAtt FirbaseAuthorizer.Arn
        DefaultAuthorizer: FirebaseAuth
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: glof_api
          Quota:
            Limit: 10000
            Period: DAY
          Throttle:
            BurstLimit: 300
            RateLimit: 100
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'X-Forwarded-For, x-api-key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"